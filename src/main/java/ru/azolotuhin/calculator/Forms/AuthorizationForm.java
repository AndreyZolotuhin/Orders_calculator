package ru.azolotuhin.calculator.Forms;

import ru.azolotuhin.calculator.Data.StockExchangeDB;
import ru.azolotuhin.calculator.Security.AuthorizationConstants;
import ru.azolotuhin.calculator.Security.User;
import ru.azolotuhin.calculator.Security.UserList;

import javax.swing.*;
import java.awt.*;

public class AuthorizationForm extends JFrame {
    private JPanel mainPanel;
    private JPanel authorizationPanel;
    private JTextField loginTextField;
    private JPasswordField passwordField;
    private JButton loginButton;
    private JLabel loginLabel;
    private JLabel passwordLabel;
    private JLabel authorizationLAbel;
    private JTextArea logTextArea;
    private JScrollPane logScrollane;

    private UserList userList;
    private boolean connected = false;
    private User currentUser;

    public AuthorizationForm() throws HeadlessException {
        super("Авторизация");

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setContentPane(mainPanel);
        setLocation(400, 250);
        setSize(400, 400);
        setVisible(true);
        loadUsers();

        new Thread(() -> {
            try {
                connectToDb();
                connected = true;
            } catch (Exception ex) {
                logTextArea.append("Проблема с соединением" + "\n");
                logTextArea.append(ex.getMessage() + "\n");
            }
        }).start();

        loginButton.addActionListener(e -> checkLoginPassword(loginTextField.getText(), passwordField.getText()));
    }

    void loadUsers() {
        userList = new UserList();
    }

    void connectToDb() {
        logTextArea.append("Соединение с базой..." + "\n");
        StockExchangeDB.getInstance();
        logTextArea.append("Соединение установлено" + "\n");
    }

    void checkLoginPassword(String login, String password) {
        logTextArea.append(userList.checkUser(login, password).toString() + "\n");
        if (userList.checkUser(login, password) == AuthorizationConstants.Response.OK) {
            currentUser = userList.getUser(login, password);
            JOptionPane.showMessageDialog(AuthorizationForm.this, "Авторизация прошла");
        } else {
            return;
        }
        // Если всё ок, запускаем основную программу!!!
        if (connected) {
            SwingUtilities.invokeLater(() -> new MainForm(currentUser));
            setVisible(false);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        mainPanel.setBackground(new Color(-15653722));
        mainPanel.setForeground(new Color(-15653722));
        authorizationPanel = new JPanel();
        authorizationPanel.setLayout(new GridBagLayout());
        authorizationPanel.setBackground(new Color(-3939847));
        authorizationPanel.setForeground(new Color(-10927941));
        mainPanel.add(authorizationPanel, BorderLayout.CENTER);
        loginTextField = new JTextField();
        loginTextField.setPreferredSize(new Dimension(200, 35));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 10, 10);
        authorizationPanel.add(loginTextField, gbc);
        passwordField = new JPasswordField();
        passwordField.setPreferredSize(new Dimension(200, 35));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 10, 10);
        authorizationPanel.add(passwordField, gbc);
        loginButton = new JButton();
        loginButton.setPreferredSize(new Dimension(200, 35));
        loginButton.setText("Вход");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 10, 0, 10);
        authorizationPanel.add(loginButton, gbc);
        loginLabel = new JLabel();
        loginLabel.setName("Логин");
        loginLabel.setText("Логин:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        authorizationPanel.add(loginLabel, gbc);
        passwordLabel = new JLabel();
        passwordLabel.setText("Пароль:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        authorizationPanel.add(passwordLabel, gbc);
        authorizationLAbel = new JLabel();
        authorizationLAbel.setHorizontalAlignment(0);
        authorizationLAbel.setHorizontalTextPosition(0);
        authorizationLAbel.setPreferredSize(new Dimension(200, 16));
        authorizationLAbel.setText("Авторизация");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10, 0, 10, 0);
        authorizationPanel.add(authorizationLAbel, gbc);
        logScrollane = new JScrollPane();
        logScrollane.setVerticalScrollBarPolicy(22);
        mainPanel.add(logScrollane, BorderLayout.SOUTH);
        logTextArea = new JTextArea();
        logTextArea.setBackground(new Color(-1286));
        logTextArea.setPreferredSize(new Dimension(250, 100));
        logScrollane.setViewportView(logTextArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
